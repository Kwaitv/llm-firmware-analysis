
undefined8 main(void)
{
    int64_t iVar1;
    int64_t iVar2;
    int64_t iVar3;
    undefined8 uVar4;
    uint32_t uVar5;
    code *pcVar6;
    double *pdVar7;
    int64_t iVar8;
    double *pdVar9;
    uint64_t uVar10;
    undefined4 uVar12;
    undefined4 *puVar11;
    undefined4 *puVar13;
    int64_t in_FS_OFFSET;
    uint8_t uVar14;
    double dVar15;
    double dVar16;
    int64_t var_190h;
    int64_t var_180h;
    int64_t var_178h;
    int64_t var_130h;
    double adStack_e0 [10];
    double adStack_90 [10];
    int64_t canary;
    
    // [13] -r-x section size 2631 named .text
    uVar14 = 0;
    canary = *(int64_t *)(in_FS_OFFSET + 0x28);
    puts("-------------------------------------------------------------");
    puts("STREAM version $Revision: 5.10 $");
    puts("-------------------------------------------------------------");
    printf("This system uses %d bytes per array element.\n", 8);
    puts("-------------------------------------------------------------");
    printf(0x416312d000000000, "Array size = %.0f (elements), Offset = %d (elements)\n", 0);
    printf(0x405312d000000000, 0x3fb312d000000000, "Memory per array = %.1f MiB (= %.1f GiB).\n");
    printf(0x406c9c3800000000, 0x3fcc9c3800000000, "Total memory required = %.1f MiB (= %.1f GiB).\n");
    uVar12 = 0;
    printf("Each kernel will be executed %d times.\n", 10);
    puts(" The *best* time for each kernel (excluding the first iteration)");
    puts(" will be used to compute the reported bandwidth.");
    pcVar6 = (code *)0x0;
    do {
        *(undefined8 *)(data.0989a8c0 + (int64_t)pcVar6 * 8) = 0x3ff0000000000000;
        *(undefined8 *)(data.04c4f4c0 + (int64_t)pcVar6 * 8) = 0x4000000000000000;
        pcVar6 = pcVar6 + 1;
    } while (pcVar6 != data.00989680);
    puVar11 = (undefined4 *)data.000040c0;
    for (pcVar6 = data.01312d00; pcVar6 != (code *)0x0; pcVar6 = pcVar6 + -1) {
        *puVar11 = 0;
        puVar11 = puVar11 + (uint64_t)uVar14 * -2 + 1;
    }
    puts("-------------------------------------------------------------");
    uVar5 = fcn.0000163b();
    if ((int32_t)uVar5 < 1) {
        uVar5 = 1;
        puts("Your clock granularity appears to be less than one microsecond.");
    } else {
        uVar10 = (uint64_t)uVar5;
        printf("Your clock granularity/precision appears to be %d microseconds.\n", uVar10);
        uVar12 = (undefined4)(uVar10 >> 0x20);
    }
    dVar15 = (double)fcn.000015e9();
    pdVar7 = (double *)data.0989a8c0;
    do {
        pdVar9 = pdVar7 + 1;
        *pdVar7 = *pdVar7 + *pdVar7;
        pdVar7 = pdVar9;
    } while (pdVar9 != (double *)0xe4e5cc0);
    dVar16 = (double)fcn.000015e9();
    dVar15 = (dVar16 - dVar15) * 1000000.0;
    printf("Each test below will take on the order of %d microseconds.\n", CONCAT44(uVar12, (int32_t)dVar15));
    printf("   (= %d clock ticks)\n", (int32_t)(dVar15 / (double)uVar5));
    puts("Increase the size of the arrays if this shows that");
    puts("you are not getting at least 20 clock ticks per test.");
    puts("-------------------------------------------------------------");
    puts("WARNING -- The above is only a rough guideline.");
    puts("For best results, please be sure you know the");
    puts("precision of your system timer.");
    puts("-------------------------------------------------------------");
    pdVar7 = (double *)&var_180h;
    do {
        dVar15 = (double)fcn.000015e9();
        puVar11 = (undefined4 *)data.0989a8c0;
        puVar13 = (undefined4 *)data.000040c0;
        for (pcVar6 = data.01312d00; pcVar6 != (code *)0x0; pcVar6 = pcVar6 + -1) {
            *puVar13 = *puVar11;
            puVar11 = puVar11 + (uint64_t)uVar14 * -2 + 1;
            puVar13 = puVar13 + (uint64_t)uVar14 * -2 + 1;
        }
        dVar16 = (double)fcn.000015e9();
        *pdVar7 = dVar16 - dVar15;
        dVar15 = (double)fcn.000015e9();
        pcVar6 = (code *)0x0;
        do {
            *(double *)(data.04c4f4c0 + (int64_t)pcVar6 * 8) = *(double *)(data.000040c0 + (int64_t)pcVar6 * 8) * 3.0;
            pcVar6 = pcVar6 + 1;
        } while (pcVar6 != data.00989680);
        dVar16 = (double)fcn.000015e9();
        pdVar7[10] = dVar16 - dVar15;
        dVar15 = (double)fcn.000015e9();
        pcVar6 = (code *)0x0;
        do {
            *(double *)(data.000040c0 + (int64_t)pcVar6 * 8) =
                 *(double *)(data.0989a8c0 + (int64_t)pcVar6 * 8) + *(double *)(data.04c4f4c0 + (int64_t)pcVar6 * 8);
            pcVar6 = pcVar6 + 1;
        } while (pcVar6 != data.00989680);
        dVar16 = (double)fcn.000015e9();
        pdVar7[0x14] = dVar16 - dVar15;
        dVar15 = (double)fcn.000015e9();
        pcVar6 = (code *)0x0;
        do {
            *(double *)(data.0989a8c0 + (int64_t)pcVar6 * 8) =
                 *(double *)(data.000040c0 + (int64_t)pcVar6 * 8) * 3.0 +
                 *(double *)(data.04c4f4c0 + (int64_t)pcVar6 * 8);
            pcVar6 = pcVar6 + 1;
        } while (pcVar6 != data.00989680);
        pdVar9 = pdVar7 + 1;
        dVar16 = (double)fcn.000015e9();
        pdVar7[0x1e] = dVar16 - dVar15;
        pdVar7 = pdVar9;
    } while (pdVar9 != (double *)&var_130h);
    pdVar7 = (double *)&var_178h;
    do {
        iVar8 = 0;
        pdVar9 = pdVar7;
        do {
            dVar15 = *pdVar9;
            pdVar9 = pdVar9 + 10;
            dVar16 = *(double *)(data.00004080 + iVar8 * 8);
            if (*(double *)(data.00004080 + iVar8 * 8) <= dVar15) {
                dVar16 = dVar15;
            }
            *(double *)(data.000040a0 + iVar8 * 8) = *(double *)(data.000040a0 + iVar8 * 8) + dVar15;
            *(double *)(data.00004080 + iVar8 * 8) = dVar16;
            dVar16 = *(double *)(data.00004040 + iVar8 * 8);
            if (dVar15 <= *(double *)(data.00004040 + iVar8 * 8)) {
                dVar16 = dVar15;
            }
            *(double *)(data.00004040 + iVar8 * 8) = dVar16;
            iVar8 = iVar8 + 1;
        } while (iVar8 != 4);
        pdVar7 = pdVar7 + 1;
    } while (pdVar7 != (double *)&var_130h);
    iVar8 = 0;
    puts("Function    Best Rate MB/s  Avg time     Min time     Max time");
    do {
        iVar3 = iVar8 * 8;
        iVar1 = iVar8 * 8;
        iVar2 = iVar8 * 8;
        uVar4 = *(undefined8 *)(iVar8 * 8 + 0x3dc0);
        dVar15 = *(double *)(data.000040a0 + iVar8 * 8);
        *(double *)(data.000040a0 + iVar8 * 8) = dVar15 / 9.0;
        iVar8 = iVar8 + 1;
        printf((*(double *)(data.000025e0 + iVar1) * 1e-06) / *(double *)(data.00004040 + iVar3), dVar15 / 9.0, 
               *(double *)(data.00004040 + iVar3), *(undefined8 *)(data.00004080 + iVar2), 
               "%s%12.1f  %11.6f  %11.6f  %11.6f\n", uVar4);
    } while (iVar8 != 4);
    puts("-------------------------------------------------------------");
    fcn.000016f2();
    puts("-------------------------------------------------------------");
    if (canary != *(int64_t *)(in_FS_OFFSET + 0x28)) {
    // WARNING: Subroutine does not return
        __stack_chk_fail();
    }
    return 0;
}

